#!/usr/bin/env node

/**
 * Module dependencies.
 */
const http = require('http');
const debug = require('debug')('observer:server');
const config = require('config');
const mongoose = require('mongoose');
const express = require('express');

const app = require('../app');

/**
 * Get port from environment and store in Express.
 */
const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */
const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */
const start = async () => {
  try {
    server.listen(port, () => console.log(`Server started on port ${port}`));
    server.on('listening', onListening);
    server.on('error', onError);
  } catch (e) {
    console.log(`Error: ${e}`);
  }
};

start().
then(() => console.log('DB ok')).
catch((err) => console.log(`Error DB: ${err}`));

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  const port = parseInt(val, 10);
  
  if (isNaN(port)) return val;
  if (port >= 0) return port;
  
  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== 'listen') throw error;
  
  const bind = typeof port === 'string'
      ? 'Pipe ' + port
      : 'Port ' + port;
  
  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  const address = server.address();
  const bind = typeof address === 'string'
      ? 'pipe ' + address
      : 'port ' + address.port;
  debug('Listening on ' + bind);
}
